
local mqttServer = "broker.hivemq.com"

local mqtt,serpent,pb-- forward declarations
local fmt=string.format

local function onstatus(type,code,status)
   if "mqtt" == type and "connect" == code and 0 == status.reasoncode then
      mqtt:subscribe"spBv1.0/#"
      tracep(false,0,"MQTT connection established; Waiting for messages")
      return true -- Accept connection
   end
   tracep(false,0,"MQTT broker disconnected or connect failed:",type,code)
   return 0 -- reconnect with zero timeout
end

local function onpublish(topic,payload,prop)
   tracep(false,0,fmt("Sparkplug topic: %s",topic))
   if not pcall(function() tracep(false,0,serpent.block(pb.decode(".org.eclipse.tahu.protobuf.Payload", payload),{comment=false}),"\n") end) then
      trace"Decoding failed"
   end
end


local function loadSchema()
   local fp <close> = ba.openio"vm":open".lua/sparkplug_b.proto"
   assert(fp, "\nsparkplug_b.proto not found")
   return fp:read"*a"
end


local function runExplorer()
   local ok
   ok,pb = pcall(require,"pb")
   assert(ok, "\nThe lua protobuf C module is not included in the server")
   local ok,protoc = pcall(require,"protoc")
   assert(ok, "\nThe Lua module 'protoc' is not included in the server's resource file")
   assert(protoc:load(loadSchema()), "Cannot parse schema")
   serpent=require"serpent"
   tracep(false,0,fmt("\nConnecting to broker %s",mqttServer))
   mqtt=require("mqttc").create(mqttServer,onstatus,onpublish,{recbta=false})
   tracep(false,0,"Sparkplug Explorer started")
end

ba.thread.run(runExplorer)

local op={
   username="admin",
   password="admin",
}

local addr= "broker.hivemq.com"
local groupId="my groupId"
local nodeName="my nodeName"

local client=require"SparkplugB".create(addr,groupId,nodeName,op)

client:on('connect', function()
   trace("received 'connect' event")
end)

client:on('reconnect', function()
   trace("received 'reconnect' event")
end)

client:on('offline', function()
   trace("received 'offline' event")
end)

client:on('error', function (error,status)
   trace("received 'error' event: ", error,":",status)
end)

client:on('close', function()
   trace("received 'close' event")
end)

local metrics={
   {
     name= "my_int",
     value= 456,
     type= "Int32"
   },
   {
     name= "my_float",
     value= 1.23,
     type= "Float"
   }
}

client:on('birth', function()
   trace("received 'birth' event")
   local payload = {metrics=metrics}
   client:publishNodeBirth(payload)
   client:publishDeviceBirth("deviceID",payload)
end)

client:on('ncmd', function (payload)
   trace("received 'ncmd' event")
   for _,mx in ipairs(payload.metrics) do
     trace(ba.json.encode(mx))
     for _,m in ipairs(metrics) do
       trace(m.name)
       if m.name == mx.name then m.value=mx.value end
     end
   end
   client:publishNodeData{metrics=metrics}
   client:publishDeviceData(deviceId,{metrics=metrics})
end)

client:on('dcmd', function (deviceId,payload)
   trace("received 'dcmd' event",ba.json.encode(payload))
   for _,mx in ipairs(payload.metrics) do
     trace(ba.json.encode(mx))
     for _,m in ipairs(metrics) do
       trace(m.name)
       if m.name == mx.name then m.value=mx.value end
     end
   end
   client:publishNodeData{metrics=metrics}
   client:publishDeviceData(deviceId,{metrics=metrics})
end)

client:on('state', function (groupId,jsonStr)
   trace("received 'state' event:", groupId,jsonStr)
end)
